name: Build and Run Function, Unit and Contract Tests

on:
  push:
    branches:
    - master
    - cv2-4793-identify-required-workflows
  pull_request:
    branches:
    - develop

permissions:
  id-token: write
  contents: read

jobs:
  functional_tests:
    runs-on: ubuntu-latest

    env:
      RECORD_RUNTIME: true
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      LANGUAGE: C.UTF-8
      PATH: /root/.local/bin:$PATH

    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache files
      run: |
        rm -rf tmp/cache tmp/cache1 tmp/cache2 tmp/cache3 tmp/cache4 tmp/cache5 && mkdir -p tmp/cache tmp/cache1
        tmp/cache2 tmp/cache3 tmp/cache4 tmp/cache5

    - name: Copy configuration files
      run: |
        cp config/config.yml.example config/config.yml
        cp config/database.yml.example config/database.yml
        cp config/sidekiq.yml.example config/sidekiq.yml
        cp config/credentials.json.example config/credentials.json
        cp config/sidekiq-test.yml.example config/sidekiq-test.yml
    
    - name: Build Docker containers
      run: docker-compose build

    - name: Run syntax checks
      run: |
        docker-compose run api bash -c 'touch /tmp/no-syntax-errors && find app lib config -name *.rb -exec bash -c "ruby -c {} >/dev/null || rm /tmp/no-syntax-errors" ";" && ls /tmp/no-syntax-errors'

    - name: Start Docker services
      run: docker-compose -f docker-compose.yml -f docker-test.yml up -d

    - name: Wait for the server to be ready
      run: |
        tail -f log/test.log &
        until curl --silent -I -f --fail http://localhost:3000 ; do printf .; sleep 1; done

    - name: Set up parallel environment
      run: docker-compose exec api test/setup-parallel-env.sh

    - name: Precompile assets
      run: docker-compose exec api bundle exec rake assets:precompile

    - name: Prepare parallel runtime log
      run: |
        sleep 10
        touch tmp/parallel_runtime_test.log
        chmod +w tmp/parallel_runtime_test.log
    
    - name: run functional tests
      run: docker-compose exec -e TEST_RETRY_COUNT=3 -e PATTERN='models mailers integration workers lib contract' api test/run-tests.sh
    
    - name: after functional tests
      run: docker-compose exec -e GIT_COMMIT_SHA=${{ github.sha }} -e GIT_COMMITTED_AT=${{ github.event.head_commit.timestamp }} -e CC_TEST_REPORTER_ID=$CC_TEST_REPORTER_ID -e PATH=$PATH -e JOB_NAME=contract_tests -e AWS_CONFIG_FILE=/app/credentials api test/test-coverage.sh

    