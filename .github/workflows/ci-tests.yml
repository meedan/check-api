name: Build and Run Tests

on:
  schedule:
    - cron: '0 5 * * *'  #Runs  daily at 5 AM UTC
  push:
    branches:
    - CV2-4794-migrate-travis-ci
    # - master
    # - develop
  # pull_request:
  #   branches:
    # - develop

env:
  CC_TEST_REPORTER_ID: "${{ secrets.CC_TEST_REPORTER_ID }}"

jobs:
  functional-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: set up enviroments 
      run: |
        export RECORD_RUNTIME=true
        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8
        export LANGUAGE=C.UTF-8
        export PATH=/root/.local/bin:$PATH
        rm -rf tmp/cache tmp/cache1 tmp/cache2 tmp/cache3 tmp/cache4 tmp/cache5 && mkdir -p tmp/cache tmp/cache1 tmp/cache2 tmp/cache3 tmp/cache4 tmp/cache5
    
    - name: set up comfiguration files
      run: |
        cp config/config.yml.example config/config.yml
        cp config/database.yml.example config/database.yml
        cp config/sidekiq.yml.example config/sidekiq.yml
        cp config/credentials.json.example config/credentials.json
        cp config/sidekiq-test.yml.example config/sidekiq-test.yml
      
    - name: Build Docker Container
      run: |
        docker-compose build
    - name: Run syntax checks
      run: |
        docker-compose run api bash -c 'touch /tmp/no-syntax-errors && find app lib config -name *.rb -exec bash -c "ruby -c {} >/dev/null || rm /tmp/no-syntax-errors" ";" && ls /tmp/no-syntax-errors'
    - name: Run Container
      run: docker-compose -f docker-compose.yml -f docker-test.yml up -d

    - name: Wait for the server to be ready
      run: |
        tail -f log/test.log &
        until curl --silent -I -f --fail http://localhost:3000 ; do printf .; sleep 1; done
    - name: Set up parallel environment
      run: docker-compose exec -T api test/setup-parallel-env.sh

    - name: Precompile assets
      run: docker-compose exec -T api bundle exec rake assets:precompile

    - name: Prepare parallel runtime log
      run: |
        sleep 10
        touch tmp/parallel_runtime_test.log
        chmod +w tmp/parallel_runtime_test.log
    
    - name: Run Functional Tests
      id: run-tests
      env:
        TEST_RETRY_COUNT: 3
      run: |
        docker-compose exec -e TEST_RETRY_COUNT=$TEST_RETRY_COUNT -T -e PATTERN='models mailers integration workers lib contract' api test/run-tests.sh
   
    - name: After functional Tests
      id: after-functional-tests
      env:
        GIT_SHA: ${{ github.sha }}
        GIT_COMMITED_AT: ${{ github.event.head_commit.timestamp }}
      run: |  
        docker-compose exec -T -e GIT_COMMIT_SHA=${{ github.sha }} \
        -e GIT_COMMITTED_AT=${{ github.event.head_commit.timestamp }} \
        -e CC_TEST_REPORTER_ID=$CC_TEST_REPORTER_ID \
        -e PATH=$PATH \
        -e JOB_NAME=functional-tests \
        -e AWS_CONFIG_FILE=/app/credentials \
        api test/test-coverage.sh
    
  
  unit-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: set up enviromnts 
      run: |
        export RECORD_RUNTIME=true
        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8
        export LANGUAGE=C.UTF-8
        export PATH=/root/.local/bin:$PATH
        rm -rf tmp/cache tmp/cache1 tmp/cache2 tmp/cache3 tmp/cache4 tmp/cache5 && mkdir -p tmp/cache tmp/cache1 tmp/cache2 tmp/cache3 tmp/cache4 tmp/cache5
    
    - name: set up comfiguration files
      run: |
        cp config/config.yml.example config/config.yml
        cp config/database.yml.example config/database.yml
        cp config/sidekiq.yml.example config/sidekiq.yml
        cp config/credentials.json.example config/credentials.json
        cp config/sidekiq-test.yml.example config/sidekiq-test.yml
      
    - name: Build Docker Container
      run: |
        docker-compose build
    - name: Run syntax checks
      run: |
        docker-compose run api bash -c 'touch /tmp/no-syntax-errors && find app lib config -name *.rb -exec bash -c "ruby -c {} >/dev/null || rm /tmp/no-syntax-errors" ";" && ls /tmp/no-syntax-errors'
    - name: Run Container
      run: docker-compose -f docker-compose.yml -f docker-test.yml up -d

    - name: Wait for the server to be ready
      run: |
        tail -f log/test.log &
        until curl --silent -I -f --fail http://localhost:3000 ; do printf .; sleep 1; done
    - name: Set up parallel environment
      run: docker-compose exec -T api test/setup-parallel-env.sh

    - name: Precompile assets
      run: docker-compose exec -T api bundle exec rake assets:precompile

    - name: Prepare parallel runtime log
      run: |
        sleep 10
        touch tmp/parallel_runtime_test.log
        chmod +w tmp/parallel_runtime_test.log
    
    - name: Run Unit Tests
      id: run-tests
      env:
        TEST_RETRY_COUNT: 3
      run: |
        docker-compose exec -e TEST_RETRY_COUNT=$TEST_RETRY_COUNT -T -e PATTERN='controllers contract' api test/run-tests.sh
    
    - name: After unit Tests
      id: unit-tests
      env:
        GIT_SHA: ${{ github.sha }}
        GIT_COMMITED_AT: ${{ github.event.head_commit.timestamp }}
      run: |  
        docker-compose exec -T -e GIT_COMMIT_SHA=${{ github.sha }} \
        -e GIT_COMMITTED_AT=${{ github.event.head_commit.timestamp }} \
        -e CC_TEST_REPORTER_ID=$CC_TEST_REPORTER_ID \
        -e PATH=$PATH \
        -e JOB_NAME=unit-tests \
        -e AWS_CONFIG_FILE=/app/credentials \
        api test/test-coverage.sh

  
  contract-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: set up enviromnts 
      run: |
        export RECORD_RUNTIME=true
        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8
        export LANGUAGE=C.UTF-8
        export PATH=/root/.local/bin:$PATH
        rm -rf tmp/cache tmp/cache1 tmp/cache2 tmp/cache3 tmp/cache4 tmp/cache5 && mkdir -p tmp/cache tmp/cache1 tmp/cache2 tmp/cache3 tmp/cache4 tmp/cache5
    
    - name: set up comfiguration files
      run: |
        cp config/config.yml.example config/config.yml
        cp config/database.yml.example config/database.yml
        cp config/sidekiq.yml.example config/sidekiq.yml
        cp config/credentials.json.example config/credentials.json
        cp config/sidekiq-test.yml.example config/sidekiq-test.yml
      
    - name: Build Docker Container
      run: |
        docker-compose build
    
    - name: Run syntax checks
      run: |
        docker-compose run api bash -c 'touch /tmp/no-syntax-errors && find app lib config -name *.rb -exec bash -c "ruby -c {} >/dev/null || rm /tmp/no-syntax-errors" ";" && ls /tmp/no-syntax-errors'
    
    - name: Run Container
      run: docker-compose -f docker-compose.yml -f docker-test.yml up -d

    - name: Wait for the server to be ready
      run: |
        tail -f log/test.log &
        until curl --silent -I -f --fail http://localhost:3000 ; do printf .; sleep 1; done
    
    - name: Set up parallel environment
      run: docker-compose exec -T api test/setup-parallel-env.sh

    - name: Precompile assets
      run: docker-compose exec -T api bundle exec rake assets:precompile

    - name: Prepare parallel runtime log
      run: |
        sleep 10
        touch tmp/parallel_runtime_test.log
        chmod +w tmp/parallel_runtime_test.log
    
    - name: Run Contract Tests
      id: run-tests
      env:
        TEST_RETRY_COUNT: 3
      run: |
        docker-compose exec -e TEST_RETRY_COUNT=$TEST_RETRY_COUNT -T -e PATTERN='controllers models mailers integration workers lib' api test/run-tests.sh
    
    - name: Set ENV for Code Climate (Pull Request)
      if: github.event_name == 'pull_request'
      run: |
        git fetch --no-tags --prune --depth=1 origin +refs/heads/$GITHUB_HEAD_REF:refs/remotes/origin/$GITHUB_HEAD_REF
        echo "GIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
        echo "GIT_COMMIT_SHA=$(git rev-parse origin/$GITHUB_HEAD_REF)" >> $GITHUB_ENV

    - name: Set ENV for Code Climate (Push)
      if: github.event_name == 'push'
      run: |
        echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        echo "GIT_COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV

    - name: Download test coverage reporter
      env: 
        CC_TEST_REPORTER_URL: https://codeclimate.com/downloads/test-reporter/test-reporter-0.7.0-linux-amd64
      run: curl -L $CC_TEST_REPORTER_URL > cc-test-reporter

    - name: Give test coverage reporter executable permissions
      run: chmod +x cc-test-reporter

    - name: Save coverage
      env:
        GIT_SHA: ${{ github.sha }}
        GITHUB_PULL_REQUEST: 'false'
        GIT_BRANCH: ${{ github.head_ref || github.ref_name }}
        GITHUB_REPO_SLUG: ${{ github.repository }}
        GITHUB_TEST_RESULT: 0
        GITHUB_BUILD_NUMBER: ${{ github.run_number }}
        GITHUB_COMMIT_SHA: ${{ github.sha }}
        GITHUB_JOB_NAME: ${{ github.job }}
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      run:  |
        apt-get install -y golang-go golang-glide
        printf '#!/bin/bash\ngo run /tmp/go/src/github.com/codeclimate/test-reporter/main.go $@\n' > test/cc-test-reporter && chmod +x test/cc-test-reporter
        export GOPATH=/tmp/go
        git config --global --add safe.directory /app
        mkdir -p /tmp/go/src/github.com/codeclimate
        git clone -b 0.10.3 https://github.com/codeclimate/test-reporter /tmp/go/src/github.com/codeclimate/test-reporter
        ./test/cc-test-reporter format-coverage -t simplecov --output ../coverage/codeclimate.$GITHUB_JOB_NAME.json ../coverage/.resultset.json
        aws s3 cp ..coverage/codeclimate.GITHUB_JOB_NAME.json s3://check-api-travis/codeclimate/coverage/codeclimate.GITHUB_JOB_NAME.json 

    - uses: actions/upload-artifact@v2
      with:
        name: coverage-${{ matrix.ruby }}
        path: coverage/codeclimate.GITHUB_JOB_NAME.json

    - uses: actions/download-artifact@v2
      with:
        name: coverage-2.4.9
        path: coverage

    - uses: actions/download-artifact@v2
      with:
        name: coverage-2.5.7
        path: coverage

    - uses: actions/download-artifact@v2
      with:
        name: coverage-2.6.5
        path: coverage

    - uses: actions/download-artifact@v2
      with:
        name: coverage-2.7.0
        path: coverage

    - name: Aggregate & upload results to Code Climate
      run: |
        ./cc-test-reporter sum-coverage coverage/codeclimate.*.json
        ./cc-test-reporter upload-coverage