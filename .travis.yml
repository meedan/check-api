language: minimal
dist: bionic
before_install:
- export APP=check
- export RECORD_RUNTIME=true
- export LC_ALL=C.UTF-8
- export LANG=C.UTF-8
- export LANGUAGE=C.UTF-8
- export PATH=/root/.local/bin:$PATH
- export GEM_PATH=/tmp/bundler/ruby/2.4.0/gems:$GEM_PATH
- git clone --branch test/253-run-tests-on-docker https://${TOKEN}:x-oauth-basic@github.com/meedan/configurator ./configurator
- mkdir -p ~/.aws && cp configurator/$APP/travis/credentials ~/.aws/
- d=configurator/$APP/travis/check-api/; for f in $(find $d -type f); do cp "$f" "${f/$d/}"; done
- rm -rf tmp/cache tmp/cache1 tmp/cache2 tmp/cache3 tmp/cache4 tmp/cache5 && mkdir -p tmp/cache tmp/cache1
  tmp/cache2 tmp/cache3 tmp/cache4 tmp/cache5
cache:
  directories:
  - "/tmp/bundler"
  - "/tmp/downloads"
  - "/usr/local/lib/python2.7/dist-packages/pip"
before_script:
- docker-compose build
- docker-compose -f docker-compose.yml -f docker-test.yml up -d
- until curl --silent -I -f --fail http://localhost:3000 ; do printf .; sleep 1; done
- docker-compose exec api test/setup-parallel-env.sh
- docker-compose exec api bundle exec rake assets:precompile
- sleep 10
- touch tmp/parallel_runtime_test.log
- chmod +w tmp/parallel_runtime_test.log
after_script:
- chmod +x test/test-coverage.sh
- docker-compose exec
  -e TRAVIS_BRANCH=$TRAVIS_BRANCH
  -e TRAVIS_PULL_REQUEST=$TRAVIS_PULL_REQUEST
  -e TRAVIS_TEST_RESULT=$TRAVIS_TEST_RESULT
  -e TRAVIS_REPO_SLUG=$TRAVIS_REPO_SLUG
  -e TRAVIS_BUILD_NUMBER=$TRAVIS_BUILD_NUMBER
  -e GIT_COMMIT_SHA=$GIT_COMMIT_SHA
  -e GIT_COMMITTED_AT=$GIT_COMMITTED_AT
  -e CC_TEST_REPORTER_ID=$CC_TEST_REPORTER_ID
  -e PATH=$PATH
  api test/test-coverage.sh
jobs:
  include:
    - stage: test
      script: docker-compose exec api test/functional-tests.sh
    - stage: test
      script: docker-compose exec api test/unit-tests.sh
notifications:
  slack:
    secure: dhqNhrJ0FVPnjtxa7R6k0s+1h/gMFNeK8zYJLZw+mK/FJ41K1u82Y8E6IDFbgNcKyAJ27ielvzGgWGSkDVltEnPR+ph15OMcy05TM9Pr2tWNusbDECOaEQgn4vGOq0shmiahE9tTOQpgc1TzhzIF9o1xgocah2PCLKiiH06kiiRlNZkaeQSJRFrXsPDDK8jIUtkLLUvFGQA6fq/lOh4tN6/N+K6+fo86wSxarkjv3d6h2flqvQqvqkbNpkv/UBC2Y1QACP+EX6uA0ySer8K5X6Q0Trrkjjacwvo5j74UVa+UYrBD+vr7Mgnr5aNFNId6M2nHd92ZiPM+6VDllCWsDLvJ2qFFy8cOO693EjrU7puaPp29+sptriIC71dk1oHSIEpPWwuaEZKzpwP4Swe322ne2th2VrjMhIye2Ru0519Lr2Dl4iTVV+hxoeVta3Nng23rUjrGoAbcw2FO1jmhANp8JWatv/V4PmlrS1/kYbiCfltWOMbKAD9f1EOTFnPCJsp3hPL238Ic+kvNJ8LM+ItNNR5cly+JPto6nSnMO8uhig9i78Mp2hVpnvrwhDLYntWEP2vcaNhP8oRys7X2iq5PRmsRwr9SyJReczd6i5gnvskXqKat6mNfPeGMBKSYof/1ve3Um0wEtwaYxvU5y/ZezFc3Kzzi6vt4P86j+mg=
env:
  global:
    - secure: NwJYV3kghSW2hReSDOnY0sG1oe7IDcix/pZprWHkfkpc+520355n71uj7gofQ2tOO7x2rg2+j9q1GVx9hbP0EsOCIl2u0csnA7lrfe9COp9cGdM7gMzSN6CvuwW9OME9eark37ACSHW1LD1TGB6OcjOkoQxTCM4E00Nj1zAYdT4gbhnBLnxW0FPpEqRB+0XN6ev53HdE5+KrwOIG/chYL/FdaTUdjfyikoduJp5pPjHt1Nd+LSoEt3WbYs8IJeSJIdzCYrD/gXHdjGF1f8v4PFCFyl1ashFtLPMuS+4DBZjR4grSbhpTBwoJAr6oRbWJNAkmaxC26s574U/7QgP6MFlJzhgKim2gvyGUmTSKgxZViyn1y7oend+vWE0281lHDMPqtO3fNel6HteFm/GoJ3lSvZPd8ddveJNacPZB6+K7KzvJWEoRy5eYdUjaejA6KiaSkblpqXoMWwDH+RjCde/HANxMhrECa9yCZlLKBdI5dPccyQwxKnebyZkU37VeWFc9fw2EUy9gmAunV5SH/Osz7b+IX+h3Mf8WxSvQutCUrD+1kspzkEVEXX41SawKD30OfMX9ZBZB9ueisyjB4kW0GzvCGlANMAQ4VDS4/FOmc+5IhcDN8i8PvzE5IGooETOtcwMWVZMrbA0/vq2Z44WQpS2Lq1NYGYhqAN947lk=
